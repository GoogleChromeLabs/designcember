---
export interface Props {
  uuid: string;
  alt?: string;
  height: number;
  width: number;
  loading: string;
  decoding: string;
  role: string;
}

const { 
  uuid, height, width, loading, role,
  alt = ' ',
  decoding = 'async'
} = Astro.props;

// BUILD SRCSETS
// configuration options
const srcsetOptions = {
  min: 300,
  max: 1700,
  increment: 150,
}

const sizesInRange = () => {
  const sizes = []
  let looping = true
  let size = srcsetOptions.min

  while (looping) {
    size += srcsetOptions.increment

    if (size > srcsetOptions.max)
      looping = false
    else
      sizes.push(size)
  }

  return sizes
}

const srcSetSizes = [srcsetOptions.min, ...sizesInRange(), srcsetOptions.max]
const srcSetResolution = [1,2,3]

const resolutionSets = srcSetResolution.map(resolution => {
  return srcSetSizes
    .map(srcset => `
      https://web-dev.imgix.net/image/${uuid}?q=75&auto=format&w=${srcset}&dpr=${resolution} ${srcset}w
    `.trim()
  ).join(',')
})
---

<picture>
  <source media="(min-resolution: 2dppx)" srcset={resolutionSets[1]}>
  <source media="(min-resolution: 3dppx)" srcset={resolutionSets[2]}>
  <img 
    alt={alt} width={width} height={height} loading={loading} decoding={decoding} role={role} 
    src={`https://web-dev.imgix.net/image/${uuid}?q=75&auto=format`} 
    srcset={resolutionSets[0]}
  >
</picture>